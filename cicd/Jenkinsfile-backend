pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "minionz/calit-backend:latest"
        IS_BACKEND_CHANGED = 'false'
        PREV_DEPLOYMENT = ""
        PREV_SERVICE = ""
        PREV_INGRESS = ""
    }

    stages {
        stage('Check for Backend Changes') {
            steps {
                script {
                    def changedFiles = sh(script: "git diff --name-only HEAD^ HEAD", returnStdout: true).trim().split('\n')
                    IS_BACKEND_CHANGED = changedFiles.any { it.contains("backend") }.toString()
                    echo "Backend changes: ${IS_BACKEND_CHANGED}"
                }
            }
        }

        stage('Build') {
            when {
                expression { IS_BACKEND_CHANGED == 'true' }
            }
            steps {
                echo "Add Permission"
                sh 'chmod +x /var/lib/jenkins/workspace/calit-backend/backend/gradlew'
                echo "Gradle Build"
                sh '''
                    cd /var/lib/jenkins/workspace/calit-backend/backend
                    ./gradlew bootJar
                '''
            }
        }

        stage('Docker Build & Push') {
            when {
                expression { IS_BACKEND_CHANGED == 'true' }
            }
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'minionztest', usernameVariable: 'DOCKERID', passwordVariable: 'DOCKERPW')
                    ]) {
                        echo "Docker Build"
                        sh """
                            docker build \
                                --build-arg AWS_ACCESSKEY=${{ env.AWS_ACCESSKEY }} \
                                --build-arg AWS_REGION=${{ env.AWS_REGION }} \
                                --build-arg AWS_SECRETKEY=${{ env.AWS_SECRETKEY }} \
                                --build-arg DB_PASSWORD=${{ env.DB_PASSWORD }} \
                                --build-arg DB_URL=${{ env.DB_URL }} \
                                --build-arg DB_USERNAME=${{ env.DB_USERNAME }} \
                                --build-arg GITHUB_CLIENT_ID=${{ env.GITHUB_CLIENT_ID }} \
                                --build-arg GITHUB_CLIENT_SECRET=${{ env.GITHUB_CLIENT_SECRET }} \
                                --build-arg GOOGLE_CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }} \
                                --build-arg GOOGLE_CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }} \
                                --build-arg JWT_SECRET=${{ env.JWT_SECRET }} \
                                --build-arg KAFKA_CONSUMER_GROUP_ID=${{ env.KAFKA_CONSUMER_GROUP_ID }} \
                                --build-arg KAFKA_SERVER=${{ env.KAFKA_SERVER }} \
                                --build-arg KAKAO_CLIENT_ID=${{ env.KAKAO_CLIENT_ID }} \
                                --build-arg KAKAO_CLIENT_SECRET=${{ env.KAKAO_CLIENT_SECRET }} \
                                --build-arg MAIL_HOST=${{ env.MAIL_HOST }} \
                                --build-arg MAIL_PASSWORD=${{ env.MAIL_PASSWORD }} \
                                --build-arg MAIL_PORT=${{ env.MAIL_PORT }} \
                                --build-arg MAIL_USERNAME=${{ env.MAIL_USERNAME }} \
                                --build-arg NAVER_CLIENT_ID=${{ env.NAVER_CLIENT_ID }} \
                                --build-arg NAVER_CLIENT_SECRET=${{ env.NAVER_CLIENT_SECRET }} \
                                --build-arg S3_BUCKET=${{ env.S3_BUCKET }} \
                                --build-arg DOMAIN_ADDRESS=${{ env.DOMAIN_ADDRESS }} \
                                -t minionz/calit-backend:1.${BUILD_ID} ./backend
                        """

                        echo "Docker Login"
                        sh "docker login -u $DOCKERID -p $DOCKERPW"

                        echo "Docker Push"
                        sh "docker push minionz/calit-backend:1.${BUILD_ID}"
                    }
                }
            }
        }

        stage('SSH Transfer and Kubernetes Deployment') {
            when {
                expression { IS_BACKEND_CHANGED == 'true' }
            }
            steps {
                script {
                    sshPublisher(
                        continueOnError: false,
                        failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: 'jenkins',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        sourceFiles: 'cicd/k8s-backend.yml',
                                        remoteDirectory: '/minionz/',
                                        execCommand: "sed -i 's/latest/1.${BUILD_ID}/g; s/vname/v${BUILD_ID}/g' /home/master/minionz/cicd/k8s-backend.yml"
                                    ),
                                    sshTransfer(
                                        execCommand: '''
                                            PREV_DEPLOYMENT=$(kubectl get deployment | grep calit-backend-v | awk '{print $1}' | sort | head -1)
                                            PREV_SERVICE=$(kubectl get service | grep backend-svc-v | awk '{print $1}' | sort | head -1)
                                            PREV_INGRESS=$(kubectl get ingress | grep backend-ingress-v | awk '{print $1}' | sort | head -1)

                                            kubectl apply -f /home/master/minionz/cicd/k8s-backend.yml

                                            sleep 40
                                            kubectl patch ingress backend-ingress-v${BUILD_ID} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary-weight":"50"}}}'

                                            sleep 40
                                            kubectl patch ingress backend-ingress-v${BUILD_ID} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary-weight":"100"}}}'
                                            kubectl patch ingress backend-ingress-v${BUILD_ID} -p '{"metadata":{"annotations":{"nginx.ingress.kubernetes.io/canary":"false"}}}'

                                            if [ -n "$PREV_DEPLOYMENT" ]; then
                                                kubectl delete deployment "$PREV_DEPLOYMENT"
                                                kubectl delete service "$PREV_SERVICE"
                                                kubectl delete ingress "$PREV_INGRESS"
                                            else
                                                echo "변경 사항 없음"
                                            fi
                                            '''
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
}